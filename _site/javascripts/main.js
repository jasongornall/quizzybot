// Generated by CoffeeScript 1.8.0
var MY_user_data, calculatePonts, cleanup, getProfileData, handleAuth, handleLink, handleRoute, intervals, route_url, showError, timeouts;

timeouts = [];

intervals = [];

MY_user_data = null;

showError = function(err) {
  if (err == null) {
    err = 'Error Occued';
  }
  return $('#popup').html(teacup.render(function() {
    return div('.modal', function() {
      return div('.modal-content', function() {
        div('.header', function() {
          return 'Error Occured';
        });
        return div(function() {
          return err;
        });
      });
    });
  }));
};

handleLink = function() {
  $('#popup').on('click', function() {
    return $('#popup').empty();
  });
  return $('a').off('click').on('click', function(e) {
    var $el, href, path;
    $el = $(e.currentTarget);
    href = $el.attr('href');
    if (href[0] !== '/') {
      return;
    }
    e.preventDefault();
    path = url('path', href);
    route_url(path || '/');
    return false;
  });
};

getProfileData = function(next) {
  var getData, user;
  user = firebase.auth().currentUser;
  getData = function(next) {
    console.log(MY_user_data);
    if (MY_user_data) {
      return next(MY_user_data);
    }
    return firebase.database().ref("users/" + user.uid).once('value', (function(_this) {
      return function(data) {
        MY_user_data = data;
        console.log(MY_user_data, 'wtf');
        return next(MY_user_data);
      };
    })(this));
  };
  return getData(function(data) {
    return next({
      name: data.child('displayName').val(),
      image: data.child('photoURL').val(),
      uid: user.uid
    });
  });
};

cleanup = function() {
  var _results;
  while (timeouts.length) {
    clearTimeout(timeouts.pop());
  }
  _results = [];
  while (intervals.length) {
    _results.push(clearInterval(intervals.pop()));
  }
  return _results;
};

calculatePonts = function(ts) {
  var base;
  base = 1;
  return base += Math.floor((Date.now() - ts) / 1000);
};

handleAuth = function(next) {
  var new_user;
  new_user = false;
  return firebase.auth().onAuthStateChanged(function(user) {
    if (user) {
      if (user.isAnonymous) {
        $('html').addClass('logged-out');
        if (new_user) {
          return firebase.database().ref("users/" + user.uid).set({
            displayName: "Quizzer-" + (Math.floor(Math.random() * 1000)),
            photoURL: "/images/profile.jpg"
          }, next);
        } else {
          return next();
        }
      } else {
        $('html').addClass('logged-in');
        return next();
      }
    } else {
      new_user = true;
      firebase.auth().signInAnonymously();
      return next();
    }
  });
};

handleRoute = function(route, $el) {
  var $form, $guesses, force, user;
  firebase.database().ref().off();
  user = firebase.auth().currentUser;
  switch (route) {
    case '/login':
      if ((user != null ? user.isAnonymous : void 0) === false) {
        return firebase.database().ref("users/" + user.uid).once('value', function(profile_doc) {
          var $save;
          $el.html(teacup.render(function() {
            div('.profile', function() {
              div('.router-header', function() {
                return 'My Profile';
              });
              div('.modify', function() {
                img('.profile', {
                  src: profile_doc.child('photoURL').val()
                });
                return input('.profile', {
                  type: 'file',
                  accept: "image/*"
                });
              });
              div('.modify', function() {
                span(function() {
                  return 'Display Name ';
                });
                return input('.name', {
                  value: profile_doc.child('displayName').val()
                });
              });
              div('.save', function() {
                return 'Save Changes';
              });
              return div('.status', function() {
                div('.saved', function() {
                  return 'Saved!';
                });
                div('.saving', function() {
                  return 'Saving...';
                });
                return div('.error', function() {
                  return 'Error Occured.. photo too large?';
                });
              });
            });
            div('.quizzypoints', function() {
              return "" + (profile_doc.child('points').val() || 0);
            });
            return div('.purchased-items', function() {
              return 'TBD';
            });
          }));
          $el.find('input.name').change(function() {
            return $el.find('.header').addClass('pending-save');
          });
          $el.find('input.profile').change(function() {
            var my_file, reader;
            if (this.files && this.files[0]) {
              reader = new FileReader();
              my_file = this.files[0];
              reader.onload = function(e) {
                var $image_profile;
                $image_profile = $el.find('img.profile');
                $image_profile.load(function() {
                  $image_profile.data('file', my_file);
                  return $el.find('.header').addClass('pending-save');
                });
                return $image_profile.attr('src', e.target.result);
              };
              return reader.readAsDataURL(my_file);
            }
          });
          $save = $el.find('.save');
          return $save.off('click').on('click', function(e) {
            $el.find('.status').attr('data-state', 'saving');
            return async.parallel([
              (function(_this) {
                return function(next) {
                  return profile_doc.child('displayName').ref.set($el.find('input.name').val(), next);
                };
              })(this), (function(_this) {
                return function(next) {
                  var file, storageRef, upload_task;
                  file = $el.find('img.profile').data('file');
                  if (!file) {
                    return next();
                  }
                  storageRef = firebase.storage().ref("users/" + user.uid + "/profile");
                  upload_task = storageRef.put(file);
                  return upload_task.on('state_changed', (function(snapshot) {}), (function(error) {
                    return next('error occured');
                  }), function() {
                    var new_url;
                    new_url = "https://images.infernalscoop.com/users/" + user.uid + "/profile?_=" + (Date.now());
                    return profile_doc.child('photoURL').ref.set(new_url, next);
                  });
                };
              })(this)
            ], function(err) {
              if (err) {
                return $el.find('.status').attr('data-state', 'error');
              } else {
                return $el.find('.status').attr('data-state', 'saved');
              }
            });
          });
        });
      } else {
        return firebase.database().ref("users/" + user.uid).once('value', function(data) {
          $el.html(teacup.render(function() {
            div('.error', function() {
              return '';
            });
            div('.router-header', function() {
              return 'Login to save your points!';
            });
            return div('.logged-out', function() {
              div('.description', function() {
                return 'This is just to connect the account I won\'t take any of your creds\nI didn\'t want to bother with forgot password flow etc.. so just\nriding the back of one of the many social networks that are\nalready out there';
              });
              div('.socials', function() {
                div('.facebook', {
                  'data-login': 'facebook'
                }, function() {
                  return 'Login';
                });
                div('.google', {
                  'data-login': 'google'
                }, function() {
                  return 'Login';
                });
                return div('.twitter', {
                  'data-login': 'twitter'
                }, function() {
                  return 'Login';
                });
              });
              if (data.child('points').val()) {
                div('.description', function() {
                  return 'It looks like you have already gotten some quizzypoints Good Job!\nClick below to convert into a permanent account!';
                });
                return div('.social-connect', function() {
                  div('.facebook', {
                    'data-login': 'facebook'
                  }, function() {
                    return 'Connect Points';
                  });
                  div('.google', {
                    'data-login': 'google'
                  }, function() {
                    return 'Connect Points';
                  });
                  return div('.twitter', {
                    'data-login': 'twitter'
                  }, function() {
                    return 'Connect Points';
                  });
                });
              }
            });
          }));
          $el.find('.social-connect [data-login]').off('click').on('click', function(e) {
            var auth;
            console.log(e, '123');
            auth = $(e.currentTarget).data('login');
            switch (auth) {
              case 'google':
                return firebase.auth().currentUser.linkWithPopup(new firebase.auth.GoogleAuthProvider()).then(function(result) {
                  return route_url('/login');
                })["catch"](function(error) {
                  return $el.find('> .error').append(teacup.render(function() {
                    return div(function() {
                      return "" + error.message + " " + error.code;
                    });
                  }));
                });
            }
          });
          return $el.find('.socials [data-login]').off('click').on('click', function(e) {
            var auth, provider;
            auth = $(e.currentTarget).data('login');
            switch (auth) {
              case 'google':
                provider = new firebase.auth.GoogleAuthProvider();
                return firebase.auth().signInWithPopup(provider).then(function(result) {
                  return route_url('/login');
                })["catch"](function(error) {
                  return $el.find('> .error').append(teacup.render(function() {
                    return div(function() {
                      return "" + error.message + " " + error.code;
                    });
                  }));
                });
            }
          });
        });
      }
      break;
    case '/store':
      return firebase.database().ref("store").on('value', function(data) {
        return $el.html(teacup.render(function() {
          div('.router-header', function() {
            return 'Quizzybot store!';
          });
          div('.description', function() {
            return 'Spend your knowledge to try to stump the net!';
          });
          return div('.store-front', function() {
            var item, _i, _len, _ref, _results;
            _ref = data.val();
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              item = _ref[_i];
              _results.push(div('.store-item', {
                'data-type': item.type
              }, function() {
                div('.name', function() {
                  return item.type;
                });
                div('.description', function() {
                  return item.description;
                });
                return div('.cost', function() {
                  return "" + item.cost + " QuizzyPoints";
                });
              }));
            }
            return _results;
          });
        }));
      });
    case '/':
      $el.html(teacup.render(function() {
        div('.router-header', function() {
          return 'Quizzybot game!';
        });
        div('.question');
        div('.guesses');
        return form('.answer-form', function() {
          input('.guess-field');
          return input({
            type: 'submit',
            value: 'submit'
          });
        });
      }));
      firebase.database().ref("active_question/public").on('value', function(data) {
        return $el.find('.question').html(teacup.render(function() {
          div(function() {
            return 'Welcome to the Quiz Game!\nJust answer the Current Riddle in a comment on this post and win...\nquizbot points!\nYeah! You can spend them over in the shop section';
          });
          h1(function() {
            return 'Question';
          });
          div('.text', function() {
            return "" + (data.child('question').val());
          });
          h3(function() {
            return 'Points';
          });
          return div('.points', function() {
            return "" + (calculatePonts(data.child('ts').val()));
          });
        }));
      });
      $guesses = $el.find('> .guesses');
      force = true;
      setTimeout((function() {
        return force = false;
      }), 3000);
      firebase.database().ref("guesses").limitToLast(100).on('child_added', function(data) {
        var correct, isScrolledToBottom, out;
        correct = "" + (data.child('correct').val());
        $guesses.append(teacup.render(function() {
          return div('.guess', function() {
            div('.profile', function() {
              return img({
                src: data.child('owner/image').val()
              });
            });
            div('.attempt', {
              'data-correct': correct
            }, function() {
              span('.username', function() {
                return data.child('owner/name').val();
              });
              return span('.name', function() {
                return data.child('answer').val();
              });
            });
            return hr();
          });
        }));
        out = $guesses[0];
        isScrolledToBottom = out.scrollHeight - out.clientHeight <= out.scrollTop + 70;
        if (force || isScrolledToBottom) {
          console.log($guesses.prop('scrollHeight'));
          $guesses.scrollTop($guesses.prop('scrollHeight'));
        }
        return $guesses.find('.guess').slice(0, 0 - 100).remove();
      });
      $form = $('.answer-form');
      return $form.submit(function() {
        var $guest, answer;
        $guest = $el.find('form .guess-field');
        answer = $guest.val();
        $guest.val('');
        async.waterfall([
          function(next) {
            return firebase.database().ref("active_question/public/user").set({
              'answer': answer,
              'owner': firebase.auth().currentUser.uid,
              'ts': firebase.database.ServerValue.TIMESTAMP
            }, function(err) {
              return next(null, err == null);
            });
          }, function(correct, next) {
            return getProfileData(function(owner) {
              return firebase.database().ref("guesses").push({
                'answer': answer,
                'correct': correct,
                'owner': owner,
                'ts': firebase.database.ServerValue.TIMESTAMP
              }, function(err) {
                return next(err);
              });
            });
          }
        ], function(err) {
          if (err) {
            return console.log(err);
          }
        });
        return false;
      });
  }
};

route_url = function(path) {
  var $el, $link, data, new_path;
  $('#body').attr('class', '');
  path = path || url('path');
  data = path.split('/');
  history.replaceState(null, null, path);
  new_path = "/" + (data[1] || '');
  $("[data-route]").hide();
  $el = $("[data-route='" + new_path + "']");
  $el.fadeIn(0, function() {
    return handleRoute(new_path, $el);
  });
  $link = $("#navigation a[href='" + new_path + "']");
  $link.addClass('active');
  return $link.siblings().removeClass('active');
};

handleLink();

$(window).load(function() {
  return handleAuth(function() {
    return route_url();
  });
});
